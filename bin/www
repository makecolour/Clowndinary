#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('clowndinary:server');
var http = require('http');
var cluster = require('cluster');
var os = require('os');
var clusterConfig = require('../config/cluster');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

/**
 * Clustering configuration
 */
const numCPUs = clusterConfig.workers;
const syncWorkers = Math.max(1, Math.floor(numCPUs * 0.3)); // 30% for sync workers
const webWorkers = numCPUs - syncWorkers;
let workerRestarts = {};

if (cluster.isMaster) {
  if (clusterConfig.logging) {
    console.log(`Master ${process.pid} is running`);
    console.log(`Starting ${webWorkers} web workers and ${syncWorkers} sync workers...`);
    console.log(`CPU cores available: ${os.cpus().length}`);
  }

  // Initialize sync coordinator
  const SyncCoordinator = require('../services/syncCoordinator');
  global.syncCoordinator = new SyncCoordinator();

  // Track worker types since env variables aren't reliably accessible
  const workerTypes = new Map();

  // Fork web workers
  for (let i = 0; i < webWorkers; i++) {
    const worker = cluster.fork({ WORKER_TYPE: 'web' });
    workerTypes.set(worker.id, 'web');
    workerRestarts[worker.id] = 0;
  }

  // Fork sync workers
  for (let i = 0; i < syncWorkers; i++) {
    const worker = cluster.fork({ WORKER_TYPE: 'sync' });
    workerTypes.set(worker.id, 'sync');
    workerRestarts[worker.id] = 0;
  }

  cluster.on('exit', (worker, code, signal) => {
    const workerType = workerTypes.get(worker.id) || 'web';
    if (clusterConfig.logging) {
      console.log(`Worker ${worker.process.pid} (${workerType}) died with code ${code} and signal ${signal}`);
    }

    if (clusterConfig.autoRestart) {
      // Check if we've exceeded max restarts
      workerRestarts[worker.id] = (workerRestarts[worker.id] || 0) + 1;
      
      if (workerRestarts[worker.id] <= clusterConfig.maxRestarts) {
        if (clusterConfig.logging) {
          console.log(`Restarting worker ${worker.id} (attempt ${workerRestarts[worker.id]}/${clusterConfig.maxRestarts})`);
        }
        
        setTimeout(() => {
          const newWorker = cluster.fork({ WORKER_TYPE: workerType });
          workerTypes.set(newWorker.id, workerType);
          workerRestarts[newWorker.id] = workerRestarts[worker.id];
          delete workerRestarts[worker.id];
          workerTypes.delete(worker.id);
        }, clusterConfig.restartDelay);
      } else {
        console.error(`Worker ${worker.id} exceeded maximum restart attempts (${clusterConfig.maxRestarts})`);
        workerTypes.delete(worker.id);
      }
    }
  });

  cluster.on('online', (worker) => {
    const workerType = workerTypes.get(worker.id) || 'web';
    if (clusterConfig.logging) {
      console.log(`${workerType} worker ${worker.process.pid} is online`);
    }
    
    // Notify sync coordinator about sync workers
    if (workerType === 'sync' && global.syncCoordinator) {
      global.syncCoordinator.registerSyncWorker(worker.id);
    }
  });

  // Graceful shutdown
  process.on('SIGTERM', () => {
    console.log('Master received SIGTERM, shutting down gracefully...');
    cluster.disconnect(() => {
      process.exit(0);
    });
  });

  process.on('SIGINT', () => {
    console.log('Master received SIGINT, shutting down gracefully...');
    cluster.disconnect(() => {
      process.exit(0);
    });
  });

} else {
  const workerType = process.env.WORKER_TYPE || 'web';
  
  if (workerType === 'web') {
    // Web workers handle HTTP requests
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    if (clusterConfig.logging) {
      console.log(`Web worker ${process.pid} started and listening on port ${port}`);
    }

    // Graceful shutdown for workers
    process.on('SIGTERM', () => {
      console.log(`Web worker ${process.pid} received SIGTERM, shutting down gracefully...`);
      server.close(() => {
        process.exit(0);
      });
    });
  } else {
    // Sync workers handle background sync tasks
    const SyncCoordinator = require('../services/syncCoordinator');
    global.syncCoordinator = new SyncCoordinator();
    
    if (clusterConfig.logging) {
      console.log(`Sync worker ${process.pid} started and ready for sync tasks`);
    }

    // Graceful shutdown for sync workers
    process.on('SIGTERM', () => {
      console.log(`Sync worker ${process.pid} received SIGTERM, shutting down gracefully...`);
      // Allow current sync operations to complete
      setTimeout(() => {
        process.exit(0);
      }, 5000);
    });
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug(`Worker ${process.pid} listening on ${bind}`);
}
